[
  {
    "name": "Write cycles",
    "isolation_level": "read committed",
    "url": "write_cycles",
    "prevents": true,
    "description": "In this anomaly, two or more transactions concurrently attempt to write to the same data item without proper synchronization.",
    "consequence": "The final state of the data may depend on the order in which the transactions commit, leading to inconsistent or incorrect data.",
    "query1": [["begin; set transaction isolation level read committed;"],
               ["update accounts set amount = 600 where username = 'Adam';"],
               ["update accounts set amount = 400 where username = 'Oliver';",
                "commit;",
                "select * from accounts;"]],
    "query2": [["begin; set transaction isolation level read committed;"],
               ["update accounts set amount = 400 where username = 'Adam';"],
               ["update accounts set amount = 600 where username = 'Oliver';",
                "commit;",
                "select * from accounts;"]]
  },
  {
    "name": "Aborted Reads",
    "isolation_level": "read committed",
    "url": "aborted_reads",
    "prevents": true,
    "description": "A transaction reads data that is modified by another transaction that is later aborted. As a result, the reading transaction sees uncommitted changes.",
    "consequence": "The reading transaction may use data that is not consistent with the committed state of the database, leading to incorrect results.",
    "query1": [["begin; set transaction isolation level read committed;"],
               ["update accounts set amount = 600 where username = 'Adam';"],
               ["abort;"]],
    "query2": [["begin; set transaction isolation level read committed;"],
               ["select * from accounts;"],
               ["select * from accounts;",
                "commit;"]]
  },
  {
    "name": "Intermediate Reads",
    "isolation_level": "read committed",
    "url": "intermediate_reads",
    "prevents": true,
    "description": "A transaction reads data modified by another transaction before that transaction is committed. This results in reading uncommitted, intermediate data.",
    "consequence": "The reading transaction may base decisions on incomplete or inconsistent data, leading to incorrect results.",
    "query1": [["begin; set transaction isolation level read committed;"],
               ["update accounts set amount = 600 where username = 'Adam';"],
               ["update accounts set amount = 300 where username = 'Adam';",
                "commit;"]],
    "query2": [["begin; set transaction isolation level read committed;"],
               ["select * from accounts;"],
               ["select * from accounts;",
                "commit;"]]
  },
  {
    "name": "Circular information flow",
    "isolation_level": "read committed",
    "url": "circular_information_flow",
    "prevents": true,
    "description": "A circular chain of transactions reads and writes data, with each transaction reading data modified by the previous one. This can result in circular dependencies.",
    "consequence": "Circular dependencies can lead to inconsistent or undefined states in the database, causing data integrity issues.",
    "query1": [["begin; set transaction isolation level read committed;"],
               ["update accounts set amount = 600 where username = 'Adam';"],
               ["select * from accounts;"],
               ["commit;"]],
    "query2": [["begin; set transaction isolation level read committed;"],
               ["update accounts set amount = 300 where username = 'Oliver';"],
               ["select * from accounts;"],
               ["commit;"]]
  },
  {
    "name": "Predicate many preceders",
    "isolation_level": "read committed",
    "url": "predicate_many_preceders",
    "prevents": false,
    "description": "Multiple transactions are concurrently trying to update or delete data that meets a certain predicate (e.g., all records with a specific condition), leading to contention.",
    "consequence": "This can result in performance bottlenecks and contention, as multiple transactions compete for access to the same data.",
    "query1": [["begin; set transaction isolation level read committed;"],
               ["select * from accounts where amount = 100;"],
               ["select * from accounts where amount = 100;",
                "commit;"]],
    "query2": [["begin; set transaction isolation level read committed;"],
               ["insert into accounts (username, amount) values('Lukas', 100);",
                "commit;"]]
  },
  {
    "name": "Predicate many preceders",
    "isolation_level": "repeatable read",
    "url": "predicate_many_preceders_2",
    "prevents": true,
    "description": "Multiple transactions are concurrently trying to update or delete data that meets a certain predicate (e.g., all records with a specific condition), leading to contention.",
    "consequence": "This can result in performance bottlenecks and contention, as multiple transactions compete for access to the same data.",
    "query1": [["begin; set transaction isolation level repeatable read;"],
               ["select * from accounts where amount = 100;"],
               ["select * from accounts where amount = 100;",
                "commit;"]],
    "query2": [["begin; set transaction isolation level repeatable read;"],
               ["insert into accounts (username, amount) values('Lukas', 100);",
                "commit;"]]
  },
  {
    "name": "Lost Update",
    "isolation_level": "read committed",
    "url": "lost_update",
    "prevents": false,
    "description": "Two or more transactions read the same data and then update it independently without coordination. One of the updates is lost because it overwrites the changes made by the other transaction.",
    "consequence": "Data updates can be lost, leading to inconsistencies in the database, as one of the updates is discarded.",
    "query1": [["begin; set transaction isolation level read committed;"],
               ["select * from accounts where username = 'Adam';"],
               ["update accounts set amount = 700 where username = 'Adam';"],
               ["commit;"],
               ["select * from accounts;"]],
    "query2": [["begin; set transaction isolation level read committed;"],
               ["select * from accounts where username = 'Adam';"],
               ["update accounts set amount = 600 where username = 'Adam';"],
               ["commit;"],
               ["select * from accounts;"]]
  },
  {
    "name": "Lost Update",
    "isolation_level": "repeatable read",
    "url": "lost_update_2",
    "prevents": true,
    "description": "Two or more transactions read the same data and then update it independently without coordination. One of the updates is lost because it overwrites the changes made by the other transaction.",
    "consequence": "Data updates can be lost, leading to inconsistencies in the database, as one of the updates is discarded.",
    "query1": [["begin; set transaction isolation level repeatable read;"],
               ["select * from accounts where username = 'Adam';"],
               ["update accounts set amount = 700 where username = 'Adam';"],
               ["commit;"],
               ["select * from accounts;"]],
    "query2": [["begin; set transaction isolation level repeatable read;"],
               ["select * from accounts where username = 'Adam';"],
               ["update accounts set amount = 600 where username = 'Adam';"],
               ["commit;"],
               ["select * from accounts;"]]
  },
  {
    "name": "Read Skew",
    "isolation_level": "read committed",
    "url": "read_skew",
    "prevents": false,
    "description": "Multiple transactions read a set of data items and then update a subset of those items independently, creating a dependency cycle.",
    "consequence": "This can lead to read skew anomalies, where one transaction's reads are inconsistent with another's writes, potentially causing incorrect results.",
    "query1": [["begin; set transaction isolation level read committed;"],
               ["select * from accounts where username = 'Adam';"],
               ["select * from accounts;",
               "commit;"]],
    "query2": [["begin; set transaction isolation level read committed;"],
               ["select * from accounts;",
               "update accounts set amount = 600 where username = 'Adam';",
               "update accounts set amount = 600 where username = 'Oliver';",
               "commit;"],
               ["select * from accounts;"]]
  },
  {
    "name": "Read Skew",
    "isolation_level": "repeatable read",
    "url": "read_skew_2",
    "prevents": true,
    "description": "Multiple transactions read a set of data items and then update a subset of those items independently, creating a dependency cycle.",
    "consequence": "This can lead to read skew anomalies, where one transaction's reads are inconsistent with another's writes, potentially causing incorrect results.",
    "query1": [["begin; set transaction isolation level repeatable read;"],
               ["select * from accounts where username = 'Adam';"],
               ["select * from accounts;",
               "commit;"]],
    "query2": [["begin; set transaction isolation level repeatable read;"],
               ["select * from accounts;",
               "update accounts set amount = 600 where username = 'Adam';",
               "update accounts set amount = 600 where username = 'Oliver';",
               "commit;"],
               ["select * from accounts;"]]
  },
  {
    "name": "Write Skew",
    "isolation_level": "repeatable read",
    "url": "write_skew",
    "prevents": false,
    "description": "Two transactions read different sets of data items but update an item that is read by the other transaction. This can lead to an anti-dependency cycle.",
    "consequence": "Write skew anomalies can occur, where one transaction's writes affect another's reads, causing inconsistent and incorrect data.",
    "query1": [["begin; set transaction isolation level repeatable read;"],
               ["select * from accounts where username in ('Adam', 'Oliver');"],
               ["update accounts set amount = 600 where username = 'Adam';"],
               ["commit;"]],
    "query2": [["begin; set transaction isolation level repeatable read;"],
               ["select * from accounts where username in ('Adam', 'Oliver');"],
               ["update accounts set amount = 600 where username = 'Oliver';"],
               ["commit;"]]
  },
  {
    "name": "Write Skew",
    "isolation_level": "serializable",
    "url": "write_skew_2",
    "prevents": true,
    "description": "Two transactions read different sets of data items but update an item that is read by the other transaction. This can lead to an anti-dependency cycle.",
    "consequence": "Write skew anomalies can occur, where one transaction's writes affect another's reads, causing inconsistent and incorrect data.",
    "query1": [["begin; set transaction isolation level serializable;"],
               ["select * from accounts where username in ('Adam', 'Oliver');"],
               ["update accounts set amount = 600 where username = 'Adam';"],
               ["commit;"]],
    "query2": [["begin; set transaction isolation level serializable;"],
               ["select * from accounts where username in ('Adam', 'Oliver');"],
               ["update accounts set amount = 600 where username = 'Oliver';"],
               ["commit;"]]
  },
  {
    "name": "Anit-Dependency Cycles",
    "isolation_level": "repeatable read",
    "url": "anti_dependency_cycles",
    "prevents": false,
    "description": "Multiple transactions read data based on a predicate (e.g., all records meeting a certain condition) and update data that overlaps or matches the predicate, leading to anti-dependency cycles.",
    "consequence": "This can result in write skew anomalies, where the overlapping updates of multiple transactions lead to inconsistent and incorrect data.",
    "query1": [["begin; set transaction isolation level repeatable read;"],
               ["select * from accounts where username = 'Adam';"],
               ["insert into accounts (id, username, amount) values (3, 'Richard', 300)"],
               ["commit;"],
               ["select * from accounts;"]],
    "query2": [["begin; set transaction isolation level repeatable read;"],
               ["select * from accounts where username = 'Adam';"],
               ["insert into accounts (id, username, amount) values (4, 'Lukas', 700)"],
               ["commit;"]]
  },
  {
    "name": "Anit-Dependency Cycles",
    "isolation_level": "serializable",
    "url": "anti_dependency_cycles_2",
    "prevents": true,
    "description": "Multiple transactions read data based on a predicate (e.g., all records meeting a certain condition) and update data that overlaps or matches the predicate, leading to anti-dependency cycles.",
    "consequence": "This can result in write skew anomalies, where the overlapping updates of multiple transactions lead to inconsistent and incorrect data.",
    "query1": [["begin; set transaction isolation level serializable;"],
               ["select * from accounts where username = 'Adam';"],
               ["insert into accounts (id, username, amount) values (3, 'Richard', 300)"],
               ["commit;"],
               ["select * from accounts;"]],
    "query2": [["begin; set transaction isolation level serializable;"],
               ["select * from accounts where username = 'Adam';"],
               ["insert into accounts (id, username, amount) values (4, 'Lukas', 700)"],
               ["commit;"]]
  }
]